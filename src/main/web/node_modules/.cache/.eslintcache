[{"C:\\Users\\79639\\IdeaProjects\\Booktracker\\src\\main\\web\\src\\index.js":"1","C:\\Users\\79639\\IdeaProjects\\Booktracker\\src\\main\\web\\src\\reportWebVitals.js":"2","C:\\Users\\79639\\IdeaProjects\\Booktracker\\src\\main\\web\\src\\App.js":"3","C:\\Users\\79639\\IdeaProjects\\Booktracker\\src\\main\\web\\src\\components\\Navbar.js":"4","C:\\Users\\79639\\IdeaProjects\\Booktracker\\src\\main\\web\\src\\components\\Welcome.js":"5","C:\\Users\\79639\\IdeaProjects\\Booktracker\\src\\main\\web\\src\\components\\UnreadBooks.js":"6","C:\\Users\\79639\\IdeaProjects\\Booktracker\\src\\main\\web\\src\\components\\ReadBooks.js":"7","C:\\Users\\79639\\IdeaProjects\\Booktracker\\src\\main\\web\\src\\components\\AddBook.js":"8","C:\\Users\\79639\\IdeaProjects\\Booktracker\\src\\main\\web\\src\\components\\Books.js":"9","C:\\Users\\79639\\IdeaProjects\\Booktracker\\src\\main\\web\\src\\components\\BookEditing.js":"10","C:\\Users\\79639\\IdeaProjects\\Booktracker\\src\\main\\web\\src\\components\\Login.js":"11","C:\\Users\\79639\\IdeaProjects\\Booktracker\\src\\main\\web\\src\\components\\ApiService.js":"12","C:\\Users\\79639\\IdeaProjects\\Booktracker\\src\\main\\web\\src\\components\\Footer.js":"13"},{"size":550,"mtime":1631212162875,"results":"14","hashOfConfig":"15"},{"size":362,"mtime":499162500000,"results":"16","hashOfConfig":"15"},{"size":1320,"mtime":1633628735132,"results":"17","hashOfConfig":"15"},{"size":1082,"mtime":1633624200754,"results":"18","hashOfConfig":"15"},{"size":2207,"mtime":1630867781064,"results":"19","hashOfConfig":"15"},{"size":2076,"mtime":1630867315916,"results":"20","hashOfConfig":"15"},{"size":2051,"mtime":1630867283648,"results":"21","hashOfConfig":"15"},{"size":5561,"mtime":1633625313717,"results":"22","hashOfConfig":"15"},{"size":8304,"mtime":1633881294022,"results":"23","hashOfConfig":"15"},{"size":9922,"mtime":1633631479624,"results":"24","hashOfConfig":"15"},{"size":2477,"mtime":1633030660721,"results":"25","hashOfConfig":"15"},{"size":446,"mtime":1633198896296,"results":"26","hashOfConfig":"15"},{"size":600,"mtime":1633622673920,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"l9sufp",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"30"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"30"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"30"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"30"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"C:\\Users\\79639\\IdeaProjects\\Booktracker\\src\\main\\web\\src\\index.js",[],["59","60"],"C:\\Users\\79639\\IdeaProjects\\Booktracker\\src\\main\\web\\src\\reportWebVitals.js",[],"C:\\Users\\79639\\IdeaProjects\\Booktracker\\src\\main\\web\\src\\App.js",[],"C:\\Users\\79639\\IdeaProjects\\Booktracker\\src\\main\\web\\src\\components\\Navbar.js",[],"C:\\Users\\79639\\IdeaProjects\\Booktracker\\src\\main\\web\\src\\components\\Welcome.js",["61"],"import React, { Component } from 'react'\r\nimport { Carousel, Caption} from 'react-bootstrap'\r\n\r\nexport class WelcomePage extends Component {\r\n    render() {\r\n        return (\r\n            <Carousel>\r\n                <Carousel.Item style={{margin: 50}}>\r\n                    <img\r\n                        className=\"d-block w-100 text-black\"\r\n                        src=\"https://pbs.twimg.com/media/EnW5cTvXUAkacSY.jpg\"\r\n                        alt=\"First slide\"\r\n                        width=\"1200\" height=\"800\"/>\r\n                    <Carousel.Caption>\r\n                        <h3>Альберт Эйнштейн</h3>\r\n                        <p>\"Если вы хотите жить счастливой жизнью, привяжите ее к цели, а не к людям или вещам.\"</p>\r\n                    </Carousel.Caption>\r\n                </Carousel.Item>\r\n                <Carousel.Item style={{margin: 50}}>\r\n                    <img\r\n                        className=\"d-block w-100\"\r\n                        src=\"https://www.foicey.com/wp-content/uploads/2020/06/jjrr-min-1024x576.jpg\"\r\n                        alt=\"Second slide\"\r\n                        width=\"1200\" height=\"800\"/>\r\n\r\n                    <Carousel.Caption>\r\n                        <h3>Жан-Жак Руссо</h3>\r\n                        <p>\"Более полная жизнь не у того, кто прожил дольше, а у того, кто больше узнал.\"</p>\r\n                    </Carousel.Caption>\r\n                </Carousel.Item>\r\n                <Carousel.Item style={{margin: 50}}>\r\n                    <img\r\n                        className=\"d-block w-100\"\r\n                        src=\"https://i.sunhome.ru/journal/251/idealizm-v2.orig.jpg\"\r\n                        alt=\"Third slide\"\r\n                        width=\"1200\" height=\"800\"\r\n                    />\r\n                    <Carousel.Caption>\r\n                        <h3>Платон</h3>\r\n                        <p>\"Книга - немой учитель.\"</p>\r\n                    </Carousel.Caption>\r\n                </Carousel.Item>\r\n            </Carousel>\r\n        )\r\n    }\r\n}\r\n\r\nexport default WelcomePage","C:\\Users\\79639\\IdeaProjects\\Booktracker\\src\\main\\web\\src\\components\\UnreadBooks.js",[],"C:\\Users\\79639\\IdeaProjects\\Booktracker\\src\\main\\web\\src\\components\\ReadBooks.js",[],"C:\\Users\\79639\\IdeaProjects\\Booktracker\\src\\main\\web\\src\\components\\AddBook.js",["62","63"],"import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport { Card, Form, Button, Col, Select } from 'react-bootstrap'\r\nimport {faSave} from '@fortawesome/free-solid-svg-icons'\r\nimport {faUndo} from '@fortawesome/free-solid-svg-icons'\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\n\r\nexport default class AddBook extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = this.initialState;\r\n        this.bookChange = this.bookChange.bind(this);\r\n        this.submitBook = this.submitBook.bind(this);\r\n    }\r\n\r\n    initialState = {\r\n        authorName: '', bookName: '', coverPicURL: '', bookStatus: ''\r\n    }\r\n\r\n    submitBook = event => {\r\n        event.preventDefault();\r\n\r\n        const book = {\r\n            authorName: this.state.authorName,\r\n            bookName: this.state.bookName,\r\n            coverPicURL: this.state.coverPicURL,\r\n            bookStatus: this.state.bookStatus\r\n        };\r\n\r\n        axios.post(\"http://localhost:8080/api/books/add-book\", book)\r\n            .then(response => {\r\n                if (response.data != null) {\r\n                    this.setState(this.initialState);\r\n                    alert(\"Book saved successfully!\");\r\n                }\r\n            });\r\n    }\r\n\r\n    bookChange = event => {\r\n        this.setState({\r\n            [event.target.name]: event.target.value\r\n        })\r\n    }\r\n\r\n    resetBook = () => {\r\n        this.setState(() => this.initialState);\r\n    }\r\n\r\n    render() {\r\n        const { authorName, bookName, coverPicURL, bookStatus } = this.state;\r\n\r\n        const options = [\r\n            {value: 'Для прочтения', label: 'Для прочтения'},\r\n            {value: 'Прочитанная', label: 'Прочитанная'}\r\n        ];\r\n    \r\n        return (\r\n            <Card className={\"bordered border-dark bg-dark text-white\"} style={{ marginTop: 50, marginBottom: 50, marginLeft: 50, marginRight: 50 }}>\r\n                <Card.Header>Добавить книгу</Card.Header>\r\n                <Form onReset={this.resetBook} onSubmit={this.submitBook} id=\"bookFormId\">\r\n                    <Card.Body>\r\n                        <Form.Group as={Col} controlId=\"formGridAuthor\">\r\n                            <Form.Label>Автор</Form.Label>\r\n                            <Form.Control required autoComplete=\"off\"\r\n                                type=\"text\" name=\"authorName\"\r\n                                value={authorName}\r\n                                onChange={this.bookChange}\r\n                                placeholder=\"Введите автора книги\"\r\n                                className={\"bg-dark text-white\"} />\r\n                        </Form.Group>\r\n                        <Form.Group as={Col} controlId=\"formGridTitle\" style={{ marginTop: 10 }}>\r\n                            <Form.Label>Название книги</Form.Label>\r\n                            <Form.Control required autoComplete=\"off\"\r\n                                type=\"text\" name=\"bookName\"\r\n                                value={bookName}\r\n                                onChange={this.bookChange}\r\n                                placeholder=\"Введите название книги\"\r\n                                className=\"bg-dark text-white\" />\r\n                        </Form.Group>\r\n                        <Form.Group as={Col} controlId=\"formGridCover\" style={{ marginTop: 10 }}>\r\n                            <Form.Label>Обложка книги</Form.Label>\r\n                            <Form.Control required autoComplete=\"off\"\r\n                                type=\"text\" name=\"coverPicURL\"\r\n                                value={coverPicURL}\r\n                                onChange={this.bookChange}\r\n                                placeholder=\"Добавьте URL картинки\"\r\n                                className=\"bg-dark text-white\" />\r\n                        </Form.Group>\r\n                        <Form.Group as={Col} controlId=\"formGridStatus\" style={{ marginTop: 10 }}>\r\n                            <Form.Label>Статус книги</Form.Label>\r\n                            <Form.Control required autoComplete=\"off\"\r\n                                type=\"text\" name=\"bookStatus\"\r\n                                value={bookStatus}\r\n                                onChange={this.bookChange}\r\n                                placeholder=\"Выберите статус книги\"\r\n                                className=\"bg-dark text-white\" />\r\n                        </Form.Group>\r\n                        {/* <Form.Label style={{ marginTop: 10 }} placeholder=\"Добавьте URL картинки\" controlId=\"formGridSelect\">Статус книги</Form.Label>\r\n                        <Form.Select className={\"bg-dark text-white\"} \r\n                                onChange={this.bookChange}\r\n                                options = {options}/> */}\r\n                    </Card.Body>\r\n                    <Card.Footer>\r\n                        <Button variant=\"success\" type=\"submit\">\r\n                            <FontAwesomeIcon icon={faSave} style={{marginRight: 10}}/>Сохранить\r\n                        </Button> {' '}\r\n                        <Button variant=\"success\" type=\"reset\">\r\n                            <FontAwesomeIcon icon={faUndo} style={{marginRight: 10}}/>Сбросить\r\n                        </Button>\r\n                    </Card.Footer>\r\n                </Form>\r\n            </Card>\r\n        )\r\n    }\r\n}","C:\\Users\\79639\\IdeaProjects\\Booktracker\\src\\main\\web\\src\\components\\Books.js",["64","65","66","67","68"],"C:\\Users\\79639\\IdeaProjects\\Booktracker\\src\\main\\web\\src\\components\\BookEditing.js",["69","70"],"import React, {Component} from 'react';\r\nimport axios from 'axios';\r\nimport ApiService from \"./ApiService\";\r\nimport {Card, Form, Button, Col, Select} from 'react-bootstrap'\r\n\r\n\r\nexport default class BookEditing extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = this.initialState;\r\n        this.bookChange = this.bookChange.bind(this);\r\n        this.updateBook = this.updateBook.bind(this);\r\n    }\r\n\r\n    initialState = {\r\n        id: '', authorName: '', bookName: '', coverPicURL: '', bookStatus: ''\r\n    }\r\n\r\n    // updateBook = (bookId) => {\r\n    //     axios.delete('http://localhost:8080/api/books/update-book/' + bookId)\r\n    //         .then(response => {\r\n    //             if (response != null) {\r\n    //                 alert('This book was successfully updated!');\r\n    //                 this.setState({\r\n    //                     books: this.state.books.filter(book => book.id != bookId)\r\n    //                 });\r\n    //             }\r\n    //         });\r\n    // };\r\n\r\n    componentDidMount() {\r\n        const bookId = +this.props.match.params.id;\r\n        if (bookId) {\r\n            this.findById(bookId);\r\n        }\r\n    }\r\n\r\n    findById = (bookId) => {\r\n        axios.get(\"http://localhost:8080/api/books/find-book-by-id/\" + bookId)\r\n            .then(response => {\r\n                if (response.data != null) {\r\n                    this.setState({\r\n                        id: response.data.id,\r\n                        authorName: response.data.authorName,\r\n                        bookName: response.data.bookName,\r\n                        coverPicURL: response.data.coverPicURL,\r\n                        bookStatus: response.data.bookStatus\r\n                    });\r\n                }\r\n            }).catch((error) => {\r\n            console.error(\"Error - \" + error);\r\n        });\r\n    }\r\n\r\n\r\n    updateBook = event => {\r\n        event.preventDefault();\r\n\r\n        const book = {\r\n            id: this.state.id,\r\n            authorName: this.state.authorName,\r\n            bookName: this.state.bookName,\r\n            coverPicURL: this.state.coverPicURL,\r\n            bookStatus: this.state.bookStatus\r\n        };\r\n\r\n        axios.put(\"http://localhost:8080/api/books/update-book/\" + book.id, book)\r\n            .then(response => {\r\n                if (response.data != null) {\r\n                    this.setState(this.initialState);\r\n                    alert(\"Book updated successfully!\");\r\n                    this.props.history.push('/show-all');\r\n                }\r\n            });\r\n    }\r\n\r\n    bookChange = event => {\r\n        this.setState({\r\n            [event.target.name]: event.target.value\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const {authorName, bookName, coverPicURL, bookStatus} = this.state;\r\n\r\n        return (\r\n            <Card className={\"bordered border-dark bg-dark text-white\"}\r\n                  style={{marginTop: 50, marginBottom: 50, marginLeft: 50, marginRight: 50}}>\r\n                <Card.Header>Изменить инфо о книге</Card.Header>\r\n                <Form onSubmit={this.updateBook} id=\"bookFormId\">\r\n                    <Card.Body>\r\n                        <Form.Group as={Col} controlId=\"formGridAuthor\">\r\n                            <Form.Label>Автор</Form.Label>\r\n                            <Form.Control required autoComplete=\"off\"\r\n                                          type=\"text\" name=\"authorName\"\r\n                                          value={authorName}\r\n                                          onChange={this.bookChange}\r\n                                          placeholder=\"Введите автора книги\"\r\n                                          className={\"bg-dark text-white\"}/>\r\n                        </Form.Group>\r\n                        <Form.Group as={Col} controlId=\"formGridTitle\" style={{marginTop: 10}}>\r\n                            <Form.Label>Название книги</Form.Label>\r\n                            <Form.Control required autoComplete=\"off\"\r\n                                          type=\"text\" name=\"bookName\"\r\n                                          value={bookName}\r\n                                          onChange={this.bookChange}\r\n                                          placeholder=\"Введите название книги\"\r\n                                          className=\"bg-dark text-white\"/>\r\n                        </Form.Group>\r\n                        <Form.Group as={Col} controlId=\"formGridCover\" style={{marginTop: 10}}>\r\n                            <Form.Label>Обложка книги</Form.Label>\r\n                            <Form.Control required autoComplete=\"off\"\r\n                                          type=\"text\" name=\"coverPicURL\"\r\n                                          value={coverPicURL}\r\n                                          onChange={this.bookChange}\r\n                                          placeholder=\"Добавьте URL картинки\"\r\n                                          className=\"bg-dark text-white\"/>\r\n                        </Form.Group>\r\n                        <Form.Group as={Col} controlId=\"formGridStatus\" style={{marginTop: 10}}>\r\n                            <Form.Label>Статус книги</Form.Label>\r\n                            <Form.Control required autoComplete=\"off\"\r\n                                          type=\"text\" name=\"bookStatus\"\r\n                                          value={bookStatus}\r\n                                          onChange={this.bookChange}\r\n                                          placeholder=\"Выберите статус книги\"\r\n                                          className=\"bg-dark text-white\"/>\r\n                        </Form.Group>\r\n                    </Card.Body>\r\n                    <Card.Footer>\r\n                        <Button variant=\"success\" type=\"submit\">\r\n                            Сохранить\r\n                        </Button>\r\n                    </Card.Footer>\r\n                </Form>\r\n            </Card>\r\n        )\r\n    }\r\n}\r\n\r\n//     constructor(props) {\r\n//         super(props);\r\n//         this.state = {\r\n//             bookId: '',\r\n//             authorName: '',\r\n//             bookName: '',\r\n//             coverPicURL: '',\r\n//             bookStatus: ''\r\n//         }\r\n//         this.saveBook = this.saveBook.bind(this);\r\n//         this.loadBook = this.loadBook.bind(this);\r\n//     }\r\n//\r\n//     fetchUserById(bookId) {\r\n//         return axios.get(\"http://localhost:8080/api/books/find-book-by-id\"+ '/' + bookId);\r\n//     }\r\n//\r\n//     componentDidMount() {\r\n//         this.loadBook();\r\n//     }\r\n//\r\n//     loadBook() {\r\n//         ApiService.fetchUserById(window.localStorage.getItem(\"bookId\"))\r\n//             .then((res) => {\r\n//                 let book = res.data.result;\r\n//                 this.setState({\r\n//                     bookId: book.id,\r\n//                     authorName: book.authorName,\r\n//                     bookName: book.bookName,\r\n//                     coverPicURL: book.coverPicURL,\r\n//                     bookStatus: book.bookStatus,\r\n//                 })\r\n//             });\r\n//     }\r\n//\r\n//     onChange = (e) =>\r\n//         this.setState({[e.target.name]: e.target.value});\r\n//\r\n//     saveBook = (e) => {\r\n//         e.preventDefault();\r\n//         let book = {\r\n//             bookId: this.state.bookId,\r\n//             authorName: this.state.authorName,\r\n//             bookName: this.state.bookName,\r\n//             coverPicURL: this.state.coverPicURL,\r\n//             bookStatus: this.state.bookStatus,\r\n//         };\r\n//\r\n//         ApiService.editBook(book)\r\n//             .then(res => {\r\n//                 this.setState({message: 'Book updated successfully.'});\r\n//                 this.props.history.push('/show-all');\r\n//             });\r\n//     }\r\n//\r\n//     render() {\r\n//         return (\r\n//             <div>\r\n//                 <h2 className=\"text-center\">Edit User</h2>\r\n//                 <form>\r\n//\r\n//                     <div className=\"form-group\">\r\n//                         <label>Book id</label>\r\n//                         <input type=\"text\" placeholder=\"bookId\" name=\"bookId\" className=\"form-control\"\r\n//                                readonly=\"true\" defaultValue={this.state.bookId}/>\r\n//                     </div>\r\n//\r\n//                     <div className=\"form-group\">\r\n//                         <label>Автор</label>\r\n//                         <input placeholder=\"authorName\" name=\"authorName\" className=\"form-control\"\r\n//                                value={this.state.authorName} onChange={this.onChange}/>\r\n//                     </div>\r\n//\r\n//                     <div className=\"form-group\">\r\n//                         <label>Название книги</label>\r\n//                         <input placeholder=\"bookName\" name=\"bookName\" className=\"form-control\"\r\n//                                value={this.state.bookName} onChange={this.onChange}/>\r\n//                     </div>\r\n//\r\n//                     <div className=\"form-group\">\r\n//                         <label>Age:</label>\r\n//                         <input placeholder=\"coverPicURL\" name=\"coverPicURL\" className=\"form-control\"\r\n//                                value={this.state.coverPicURL} onChange={this.onChange}/>\r\n//                     </div>\r\n//\r\n//                     <div className=\"form-group\">\r\n//                         <label>Salary:</label>\r\n//                         <input placeholder=\"bookStatus\" name=\"bookStatus\" className=\"form-control\"\r\n//                                value={this.state.bookStatus} onChange={this.onChange}/>\r\n//                     </div>\r\n//                         <button className=\"btn btn-success\" onClick={this.saveBook}>Сохранить</button>\r\n//                 </form>\r\n//             </div>\r\n//         );\r\n//     }\r\n// }","C:\\Users\\79639\\IdeaProjects\\Booktracker\\src\\main\\web\\src\\components\\Login.js",[],"C:\\Users\\79639\\IdeaProjects\\Booktracker\\src\\main\\web\\src\\components\\ApiService.js",["71","72"],"import axios from 'axios';\r\n\r\nclass ApiService {\r\n\r\n    fetchBooks() {\r\n        return axios.get(\"http://localhost:8080/api/books/show-all\");\r\n    }\r\n\r\n    fetchUserById(bookId) {\r\n        return axios.get(\"http://localhost:8080/api/books/find-book-by-id\" + '/' + bookId);\r\n    }\r\n\r\n    editBook(book) {\r\n        return axios.post(\"http://localhost:8080/api/books/update-book\" + '/' + book.id, book);\r\n    }\r\n}\r\n\r\nexport default new ApiService();","C:\\Users\\79639\\IdeaProjects\\Booktracker\\src\\main\\web\\src\\components\\Footer.js",[],{"ruleId":"73","replacedBy":"74"},{"ruleId":"75","replacedBy":"76"},{"ruleId":"77","severity":1,"message":"78","line":2,"column":20,"nodeType":"79","messageId":"80","endLine":2,"endColumn":27},{"ruleId":"77","severity":1,"message":"81","line":3,"column":35,"nodeType":"79","messageId":"80","endLine":3,"endColumn":41},{"ruleId":"77","severity":1,"message":"82","line":53,"column":15,"nodeType":"79","messageId":"80","endLine":53,"endColumn":22},{"ruleId":"77","severity":1,"message":"83","line":3,"column":29,"nodeType":"79","messageId":"80","endLine":3,"endColumn":40},{"ruleId":"77","severity":1,"message":"84","line":3,"column":50,"nodeType":"79","messageId":"80","endLine":3,"endColumn":55},{"ruleId":"77","severity":1,"message":"85","line":3,"column":57,"nodeType":"79","messageId":"80","endLine":3,"endColumn":60},{"ruleId":"77","severity":1,"message":"86","line":4,"column":8,"nodeType":"79","messageId":"80","endLine":4,"endColumn":18},{"ruleId":"87","severity":1,"message":"88","line":54,"column":72,"nodeType":"89","messageId":"90","endLine":54,"endColumn":74},{"ruleId":"77","severity":1,"message":"86","line":3,"column":8,"nodeType":"79","messageId":"80","endLine":3,"endColumn":18},{"ruleId":"77","severity":1,"message":"81","line":4,"column":34,"nodeType":"79","messageId":"80","endLine":4,"endColumn":40},{"ruleId":"91","severity":1,"message":"92","line":10,"column":76,"nodeType":"89","messageId":"93","endLine":10,"endColumn":77},{"ruleId":"91","severity":1,"message":"92","line":14,"column":73,"nodeType":"89","messageId":"93","endLine":14,"endColumn":74},"no-native-reassign",["94"],"no-negated-in-lhs",["95"],"no-unused-vars","'Caption' is defined but never used.","Identifier","unusedVar","'Select' is defined but never used.","'options' is assigned a value but never used.","'ButtonGroup' is defined but never used.","'Modal' is defined but never used.","'Nav' is defined but never used.","'ApiService' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","no-global-assign","no-unsafe-negation"]